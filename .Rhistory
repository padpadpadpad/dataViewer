devtools::document()
devtools::document()
library(dataViewer)
library(dataViewer)
devtools::document()
devtools::use_package(miniUI)
devtools::use_package('miniUI')
devtools::use_package('shiny')
devtools::ggplot2('shiny')
devtools::use_package('ggplot2')
devtools::use_package('miniUI')
devtools::use_package('shiny')
devtools::use_package('ggplot2')
?utils
?head
devtools::document
devtools::document()
?do.call
devtools::use_build_ignore('dataViewer_test.Rmd')
devtools::use_build_ignore('dataViewer_test.R')
library(ggplot2)
data(mpg)
colnames(mpg)
head(mpg)
?mpg
data("diamonds")
colnames(diamonds)
dataViewer(mpg, x = 'cut', y = 'carat', lm = T)
data(diamonds)
dataViewer(diamonds, x = 'cut', y = 'carat', lm = T)
head(diamonds)
dataViewer(diamonds, x = 'carat', y = 'price', id_col = 'cut', lm = T)
library(dataViewer)
devtools::use_readme_rmd()
data("msleep")
?msleep
dataViewer(msleep, x = 'bodywt', y = 'sleep\_total', col = 'vore')
head(msleep)
dataViewer(msleep, x = 'bodywt', y = 'sleep_total', col = 'vore')
dataViewer(msleep, x = log('bodywt'), y = 'sleep_total', col = 'vore')
dataViewer(msleep, x = 'bodywt', y = 'sleep_total', col = 'vore')
dataViewer(msleep, x = 'awake', y = 'sleep_total', col = 'vore')
dataViewer(msleep, x = 'sleep_rem', y = 'sleep_total', col = 'vore')
dataViewer(msleep, x = 'sleep_cycle', y = 'sleep_total', col = 'vore')
dataViewer(msleep, x = 'conservation', y = 'sleep_total', col = 'vore')
data("iris")
colnames(iris)
dataViewer(iris, x = 'Sepal.Length', y = 'Sepal.Width', col = 'Species')
dataViewer(iris, x = 'Sepal.Length', y = 'Petal.Length', col = 'Species')
dataViewer(iris, x = 'Sepal.Length', y = 'Petal.Length', col = 'Species', lm.fit = T)
dataViewer(iris, x = 'Sepal.Length', y = 'Petal.Length', col = 'Species', lm_fit = T)
data("chickwts")
colnames(chickwts)
data("npk")
colnames(npk)
dataViewer(iris, x = 'K', y = 'yield', col = 'block', lm_fit = T)
dataViewer(npk, x = 'K', y = 'yield', col = 'block', lm_fit = T)
data("chickwts")
head(chickwts)
data("ChickWeight")
head(ChickWeight)
dataViewer(ChickWeight, x = 'Time', y = 'weight', col = 'Diet', id_col = 'Chick', lm_fit = T)
unique(ChickWeight$Diet)
dataViewer(ChickWeight, x = 'Time', y = 'weight', col = 'Diet', lm_fit = T)
unique(ChickWeight$Diet)
unique(ChickWeight$Chick)
dataViewer(ChickWeight, x = 'Time', y = 'weight', col = 'Diet', id_col = 'Diet', lm_fit = T)
dataViewer(ChickWeight, x = 'Time', y = 'weight', id_col = 'Diet', lm_fit = T)
dataViewer(ChickWeight, x = 'Time', y = 'weight', id_col = 'Diet', lm_fit = T)
####################################################
##### BALANCED GROWTH ############
#path <- '/Volumes/HITACHI/Work/Project Students/Daniel Padfield/Chlorella experiment lab/DanPadData/Balanced Growth/data'
#path.fig <- '/Volumes/HITACHI/Work/Project Students/Daniel Padfield/Chlorella experiment lab/DanPadData/Balanced Growth/graphs'
rm(list = ls())
path <- '~/Desktop/PhD/Chlorella/Balanced Growth/Balanced growth/data'
path.fig <- '~/Desktop/PhD/Chlorella/Balanced Growth/Balanced growth/graphs'
path.pub.fig <- '~/Desktop/DanPadData/graphs/Publication'
library(plyr)
library(lattice)
library(nlme)
library(minpack.lm)
library(ggplot2)
library(grid)
library(gridExtra)
library(lme4)
library(multcomp)
library(dplyr)
library(tidyr)
library(lsmeans)
library(papeR)
library(gtable)
library(TeamPhytoplankton)
# source lme R squared function
source('~/Dropbox/PhD/R/Functions/R^2 lme(r)/r^2 for lme(r) objects.R', chdir = TRUE)
# vplayout function
# function for layouts in grid
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# biomass estimates
all.data <- read.csv(paste(path, 'AG.counts.csv', sep = '/'))
# make categorical variables characters
all.data$growth.temp_c <- as.character(all.data$growth.temp)
all.data$rep_c <- as.character(all.data$rep)
all.data$dilution_c <- as.character(all.data$Dilution)
all.data$CFrep_c <- as.character(all.data$CFrep)
# correct counts for blanks
all.data$count.cor <- all.data$count - all.data$BLA
# remove negative counts
all.data$count.cor <- ifelse(all.data$count.cor < 0, 0, all.data$count.cor)
# pg C cell^-1 Montagnes et al (1994) L&O
all.data $carbon <- all.data$Volume*0.109
# drop Bacteria
all.data <- all.data[! all.data$carbon <=3,]
#### Get biomass per rep per dilution interval - use both counts and biomass
all.bio <- ddply(all.data, .(growth.temp, rep, Dilution, CFrep), summarise, biom=sum(carbon * count.cor), dens=sum(count.cor))
bio.av <- ddply(all.bio, .(growth.temp, rep, Dilution), summarise, biomass = mean(biom), biomass.sd = sd(biom), density=mean(dens), density.sd = sd(dens))
bio.av <- bio.av[order(bio.av$growth.temp,bio.av$rep,bio.av$Dilution),]
# delete all 25 points before dilution 23
bio.av <- bio.av[! (bio.av$growth.temp == '25' & bio.av$Dilution < 23),]
# bring in times data
times <- read.csv(paste(path, 'AG.times.csv', sep = '/'))
# merge times and biomass data
bio.merge <- merge(bio.av, times, by=c('Dilution','growth.temp'))
bio.merge <- bio.merge[order(bio.merge$growth.temp, bio.merge $rep, bio.merge$Dilution),]
# Get initial and final biomass
bio.merge$T_0 <- bio.merge$biomass / bio.merge$Dilution.Factor
bio.merge$T_f <- bio.merge$biomass
bio.merge$T_0_den <- bio.merge$density / bio.merge$Dilution.Factor
bio.merge$T_f_den <- bio.merge$density
# Change specific dilution factors for some replicates
# altering certain values which have different dilution factors
# dilution 2, rep 2 and B
bio.merge[which(bio.merge$Dilution == 2 & bio.merge$rep == 2 & bio.merge$growth.temp == 27),]$Dilution.Factor <- 200
bio.merge[which(bio.merge$Dilution == 2 & bio.merge$rep == 'B' & bio.merge$growth.temp == 27),]$Dilution.Factor <- 100
bio.merge[which(bio.merge$Dilution == 11 & bio.merge$rep == 1 & bio.merge$growth.temp == 27),]$Dilution.Factor <- 50
bio.merge[which(bio.merge$Dilution == 11 & bio.merge$rep == 'B' & bio.merge$growth.temp == 27),]$Dilution.Factor <- 50
bio.merge[which(bio.merge$Dilution == 15 & bio.merge$rep == 2 & bio.merge$growth.temp == 27),]$Dilution.Factor <- 400
bio.merge[which(bio.merge$Dilution == 15 & bio.merge$rep == 'B' & bio.merge$growth.temp == 27),]$Dilution.Factor <- 400
bio.merge[which(bio.merge$Dilution == 14 & bio.merge$rep == 'B' & bio.merge$growth.temp == 30),]$Dilution.Factor <- 200
bio.merge[which(bio.merge$Dilution == 15 & bio.merge$rep == 'B' & bio.merge$growth.temp == 30),]$Dilution.Factor <- 100
bio.merge[which(bio.merge$Dilution == 17 & bio.merge$rep == 'B' & bio.merge$growth.temp == 30),]$Dilution.Factor <- 400
bio.merge[which(bio.merge$Dilution == 18 & bio.merge$rep == 'B' & bio.merge$growth.temp == 30),]$Dilution.Factor <- 800
bio.merge[which(bio.merge$Dilution == 12 & bio.merge$rep == '2' & bio.merge$growth.temp == 23),]$Dilution.Factor <- 50
bio.merge[which(bio.merge$Dilution == 11 & bio.merge$rep == '2' & bio.merge$growth.temp == 23),]$Dilution.Factor <- 800
bio.merge[which(bio.merge$Dilution == 23 & bio.merge$growth.temp == 25),]$diff.time <- 0
# loop over growth rate estimates
bio.merge$gr.rate <- numeric(length(bio.merge$T_f))
bio.merge$gr.rate_den <- numeric(length(bio.merge$T_f))
for (i in 1:length(bio.merge$T_f)){
bio.merge$gr.rate[i+1] <- log(bio.merge$T_f[i+1] / bio.merge$T_0[i]) / bio.merge$diff.time[i+1]
bio.merge$gr.rate_den[i+1] <- log(bio.merge$T_f_den[i+1] / bio.merge$T_0_den[i]) / bio.merge$diff.time[i+1]
}
# make Infs NAs
bio.merge$gr.rate <- ifelse(bio.merge$gr.rate == 'Inf', NA, bio.merge$gr.rate)
bio.merge$gr.rate_den <- ifelse(bio.merge$gr.rate_den == 'Inf', NA, bio.merge$gr.rate_den)
# add an identifier for growth.temp:rep
bio.merge <- within(bio.merge, id <- as.character(factor(rep):factor(growth.temp)))
id <- unique(bio.merge$id)
# add a column for doubling time
bio.merge$double.time <- log(2)/bio.merge$gr.rate
bio.merge$doubles <- bio.merge$diff.time/bio.merge$double.time
# function for cum.na
cum.na <- function(x) {
x[which(is.na(x))] <- 0
return(cumsum(x))
}
# add a column for cumulative doubles
bio.merge <- ddply(bio.merge, .(growth.temp, rep), transform, gens = cum.na(doubles))
# add a column for cumulative time
bio.merge <- ddply(bio.merge, .(growth.temp, rep), transform, time = cum.na(diff.time))
# tot generations
gen.tot <- ddply(bio.merge, .(growth.temp, rep), summarise, gens=sum(doubles, na.rm=TRUE))
# delete gr.rate value for first row
bio.merge$gr.rate[1] <- NA
bio.merge$gr.rate_den[1] <- NA
# create columns for factors of growth temp and rep
bio.merge$growth.temp.fac <- as.factor(bio.merge$growth.temp)
bio.merge$rep.fac <- as.factor(bio.merge$rep)
bio.merge$id.fac <- as.factor(bio.merge$id)
# delete 25ÂºC
bio.merge <- bio.merge[! bio.merge$growth.temp %in% c('25'),]
# delete some points that are erroneous
bio.merge <- within(bio.merge, est <- as.factor(Dilution):as.factor(growth.temp):as.factor(rep))
#bio.merge$gr.rate[bio.merge$est %in% c('1:23:1', '1:23:2', '1:23:B', '4:33:2', '4:33:B', '3:33:1', '1:30:1', '1:30:2', '1:30:B', '16:30:B', '17:30:2', '17:30:1')] <- NA
# plot gens vs time
ggplot(bio.merge) +
geom_point(aes(time, gens)) +
theme_bw() +
facet_wrap(~growth.temp)
# delete points after which thermal performance curves were not taken
bio.merge.orig <- bio.merge
bio.merge <- bio.merge[! (bio.merge$growth.temp == 20 & bio.merge$gens > 99),]
bio.merge <- bio.merge[! (bio.merge$growth.temp == 23 & bio.merge$gens > 95),]
bio.merge <- bio.merge[! (bio.merge$growth.temp == 27 & bio.merge$gens > 110),]
bio.merge <- bio.merge[! (bio.merge$growth.temp == 30 & bio.merge$gens > 135),]
bio.merge <- bio.merge[! (bio.merge$growth.temp == 33 & bio.merge$gens > 116),]
control <- lmeControl(maxIter = 10000, tol = 1e-15, opt = 'optim')
# get rid of NAs for gr.rate
bio.merge2 <- bio.merge[! is.na(bio.merge$gr.rate),]
bio.merge2$growth.temp.fac <- droplevels(bio.merge2$growth.temp.fac)
detach("package:plyr", unload=TRUE)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
all.bio <- ddply(all.data, .(growth.temp, rep, Dilution, CFrep), summarise, biom=sum(carbon * count.cor), dens=sum(count.cor))
bio.av <- ddply(all.bio, .(growth.temp, rep, Dilution), summarise, biomass = mean(biom), biomass.sd = sd(biom), density=mean(dens), density.sd = sd(dens))
bio.av <- bio.av[order(bio.av$growth.temp,bio.av$rep,bio.av$Dilution),]
# delete all 25 points before dilution 23
bio.av <- bio.av[! (bio.av$growth.temp == '25' & bio.av$Dilution < 23),]
# bring in times data
times <- read.csv(paste(path, 'AG.times.csv', sep = '/'))
# merge times and biomass data
bio.merge <- merge(bio.av, times, by=c('Dilution','growth.temp'))
bio.merge <- bio.merge[order(bio.merge$growth.temp, bio.merge $rep, bio.merge$Dilution),]
# Get initial and final biomass
bio.merge$T_0 <- bio.merge$biomass / bio.merge$Dilution.Factor
bio.merge$T_f <- bio.merge$biomass
bio.merge$T_0_den <- bio.merge$density / bio.merge$Dilution.Factor
bio.merge$T_f_den <- bio.merge$density
# Change specific dilution factors for some replicates
# altering certain values which have different dilution factors
# dilution 2, rep 2 and B
bio.merge[which(bio.merge$Dilution == 2 & bio.merge$rep == 2 & bio.merge$growth.temp == 27),]$Dilution.Factor <- 200
bio.merge[which(bio.merge$Dilution == 2 & bio.merge$rep == 'B' & bio.merge$growth.temp == 27),]$Dilution.Factor <- 100
bio.merge[which(bio.merge$Dilution == 11 & bio.merge$rep == 1 & bio.merge$growth.temp == 27),]$Dilution.Factor <- 50
bio.merge[which(bio.merge$Dilution == 11 & bio.merge$rep == 'B' & bio.merge$growth.temp == 27),]$Dilution.Factor <- 50
bio.merge[which(bio.merge$Dilution == 15 & bio.merge$rep == 2 & bio.merge$growth.temp == 27),]$Dilution.Factor <- 400
bio.merge[which(bio.merge$Dilution == 15 & bio.merge$rep == 'B' & bio.merge$growth.temp == 27),]$Dilution.Factor <- 400
bio.merge[which(bio.merge$Dilution == 14 & bio.merge$rep == 'B' & bio.merge$growth.temp == 30),]$Dilution.Factor <- 200
bio.merge[which(bio.merge$Dilution == 15 & bio.merge$rep == 'B' & bio.merge$growth.temp == 30),]$Dilution.Factor <- 100
bio.merge[which(bio.merge$Dilution == 17 & bio.merge$rep == 'B' & bio.merge$growth.temp == 30),]$Dilution.Factor <- 400
bio.merge[which(bio.merge$Dilution == 18 & bio.merge$rep == 'B' & bio.merge$growth.temp == 30),]$Dilution.Factor <- 800
bio.merge[which(bio.merge$Dilution == 12 & bio.merge$rep == '2' & bio.merge$growth.temp == 23),]$Dilution.Factor <- 50
bio.merge[which(bio.merge$Dilution == 11 & bio.merge$rep == '2' & bio.merge$growth.temp == 23),]$Dilution.Factor <- 800
bio.merge[which(bio.merge$Dilution == 23 & bio.merge$growth.temp == 25),]$diff.time <- 0
# loop over growth rate estimates
bio.merge$gr.rate <- numeric(length(bio.merge$T_f))
bio.merge$gr.rate_den <- numeric(length(bio.merge$T_f))
for (i in 1:length(bio.merge$T_f)){
bio.merge$gr.rate[i+1] <- log(bio.merge$T_f[i+1] / bio.merge$T_0[i]) / bio.merge$diff.time[i+1]
bio.merge$gr.rate_den[i+1] <- log(bio.merge$T_f_den[i+1] / bio.merge$T_0_den[i]) / bio.merge$diff.time[i+1]
}
# make Infs NAs
bio.merge$gr.rate <- ifelse(bio.merge$gr.rate == 'Inf', NA, bio.merge$gr.rate)
bio.merge$gr.rate_den <- ifelse(bio.merge$gr.rate_den == 'Inf', NA, bio.merge$gr.rate_den)
# add an identifier for growth.temp:rep
bio.merge <- within(bio.merge, id <- as.character(factor(rep):factor(growth.temp)))
id <- unique(bio.merge$id)
# add a column for doubling time
bio.merge$double.time <- log(2)/bio.merge$gr.rate
bio.merge$doubles <- bio.merge$diff.time/bio.merge$double.time
# function for cum.na
cum.na <- function(x) {
x[which(is.na(x))] <- 0
return(cumsum(x))
}
# add a column for cumulative doubles
bio.merge <- ddply(bio.merge, .(growth.temp, rep), transform, gens = cum.na(doubles))
# add a column for cumulative time
bio.merge <- ddply(bio.merge, .(growth.temp, rep), transform, time = cum.na(diff.time))
# tot generations
gen.tot <- ddply(bio.merge, .(growth.temp, rep), summarise, gens=sum(doubles, na.rm=TRUE))
# delete gr.rate value for first row
bio.merge$gr.rate[1] <- NA
bio.merge$gr.rate_den[1] <- NA
# create columns for factors of growth temp and rep
bio.merge$growth.temp.fac <- as.factor(bio.merge$growth.temp)
bio.merge$rep.fac <- as.factor(bio.merge$rep)
bio.merge$id.fac <- as.factor(bio.merge$id)
# delete 25ÂºC
bio.merge <- bio.merge[! bio.merge$growth.temp %in% c('25'),]
# delete some points that are erroneous
bio.merge <- within(bio.merge, est <- as.factor(Dilution):as.factor(growth.temp):as.factor(rep))
#bio.merge$gr.rate[bio.merge$est %in% c('1:23:1', '1:23:2', '1:23:B', '4:33:2', '4:33:B', '3:33:1', '1:30:1', '1:30:2', '1:30:B', '16:30:B', '17:30:2', '17:30:1')] <- NA
# plot gens vs time
ggplot(bio.merge) +
geom_point(aes(time, gens)) +
theme_bw() +
facet_wrap(~growth.temp)
# delete points after which thermal performance curves were not taken
bio.merge.orig <- bio.merge
bio.merge <- bio.merge[! (bio.merge$growth.temp == 20 & bio.merge$gens > 99),]
bio.merge <- bio.merge[! (bio.merge$growth.temp == 23 & bio.merge$gens > 95),]
bio.merge <- bio.merge[! (bio.merge$growth.temp == 27 & bio.merge$gens > 110),]
bio.merge <- bio.merge[! (bio.merge$growth.temp == 30 & bio.merge$gens > 135),]
bio.merge <- bio.merge[! (bio.merge$growth.temp == 33 & bio.merge$gens > 116),]
control <- lmeControl(maxIter = 10000, tol = 1e-15, opt = 'optim')
# get rid of NAs for gr.rate
bio.merge2 <- bio.merge[! is.na(bio.merge$gr.rate),]
bio.merge2$growth.temp.fac <- droplevels(bio.merge2$growth.temp.fac)
save('~/Desktop/Chlorella_growth.Rdata')
head(bio.merge2)
save(select(bio.merge2, c(Dilution, growth.temp.fac, rep.fac, gr.rate, gens, id.fac)), '~/Desktop/Chlorella_growth.Rdata')
save('~/Desktop/Chlorella_growth.Rdata', select(bio.merge2, c(Dilution, growth.temp.fac, rep.fac, gr.rate, gens, id.fac)))
?save
bio.merge3 <- select(bio.merge2, c(Dilution, growth.temp.fac, rep.fac, gr.rate, gens, id.fac))
save(bio.merge3 <- '~/Desktop/Chlorella_growth.Rdata')
save(bio.merge3, '~/Desktop/Chlorella_growth.Rdata')
save(bio.merge3, file = '~/Desktop/Chlorella_growth.Rdata')
